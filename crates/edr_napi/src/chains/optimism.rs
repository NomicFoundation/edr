use std::sync::Arc;

use edr_eth::hex;
use edr_napi_core::{
    logger::{self, Logger},
    provider::{self, ProviderBuilder, SyncProviderFactory},
    spec::SyncNapiSpec as _,
    subscription,
};
use edr_optimism::{OptimismChainSpec, OptimismSpecId};
use edr_solidity::contract_decoder::ContractDecoder;
use napi::bindgen_prelude::BigInt;
use napi_derive::napi;

use crate::{
    account::{Account, StorageSlot},
    provider::ProviderFactory,
};

pub struct OptimismProviderFactory;

impl SyncProviderFactory for OptimismProviderFactory {
    fn create_provider_builder(
        &self,
        env: &napi::Env,
        provider_config: provider::Config,
        logger_config: logger::Config,
        subscription_config: subscription::Config,
        contract_decoder: Arc<ContractDecoder>,
    ) -> napi::Result<Box<dyn provider::Builder>> {
        let logger =
            Logger::<OptimismChainSpec>::new(logger_config, Arc::clone(&contract_decoder))?;

        let provider_config = edr_provider::ProviderConfig::<OptimismSpecId>::from(provider_config);

        let subscription_callback =
            subscription::Callback::new(env, subscription_config.subscription_callback)?;

        Ok(Box::new(ProviderBuilder::new(
            contract_decoder,
            Box::new(logger),
            provider_config,
            subscription_callback,
        )))
    }
}

/// Enumeration of supported Optimism hardforks.
#[napi]
pub enum OptimismHardfork {
    Bedrock = 16,
    Regolith = 17,
    Shanghai = 18,
    Canyon = 19,
    Cancun = 20,
    Ecotone = 21,
    Fjord = 22,
    Granite = 23,
    Latest = 2_147_483_647, // Maximum value of i32
}

impl From<OptimismHardfork> for OptimismSpecId {
    fn from(hardfork: OptimismHardfork) -> Self {
        match hardfork {
            OptimismHardfork::Bedrock => OptimismSpecId::BEDROCK,
            OptimismHardfork::Regolith => OptimismSpecId::REGOLITH,
            OptimismHardfork::Shanghai => OptimismSpecId::SHANGHAI,
            OptimismHardfork::Canyon => OptimismSpecId::CANYON,
            OptimismHardfork::Cancun => OptimismSpecId::CANCUN,
            OptimismHardfork::Ecotone => OptimismSpecId::ECOTONE,
            OptimismHardfork::Fjord => OptimismSpecId::FJORD,
            OptimismHardfork::Granite => OptimismSpecId::GRANITE,
            OptimismHardfork::Latest => OptimismSpecId::LATEST,
        }
    }
}

impl TryFrom<&str> for OptimismHardfork {
    type Error = napi::Error;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
            edr_optimism::hardfork::id::BEDROCK => Ok(OptimismHardfork::Bedrock),
            edr_optimism::hardfork::id::REGOLITH => Ok(OptimismHardfork::Regolith),
            edr_optimism::hardfork::id::SHANGHAI => Ok(OptimismHardfork::Shanghai),
            edr_optimism::hardfork::id::CANYON => Ok(OptimismHardfork::Canyon),
            edr_optimism::hardfork::id::CANCUN => Ok(OptimismHardfork::Cancun),
            edr_optimism::hardfork::id::ECOTONE => Ok(OptimismHardfork::Ecotone),
            edr_optimism::hardfork::id::FJORD => Ok(OptimismHardfork::Fjord),
            edr_optimism::hardfork::id::GRANITE => Ok(OptimismHardfork::Granite),
            edr_optimism::hardfork::id::LATEST => Ok(OptimismHardfork::Latest),
            _ => Err(napi::Error::new(
                napi::Status::InvalidArg,
                format!("The provided Optimism hardfork `{value}` is not supported."),
            )),
        }
    }
}

#[napi]
pub const OPTIMISM_CHAIN_TYPE: &str = OptimismChainSpec::CHAIN_TYPE;

#[napi]
pub fn optimism_genesis_state(_hardfork: OptimismHardfork) -> Vec<Account> {
    let gas_price_oracle_code = hex::decode(include_str!(
        "../../data/optimism/predeploys/gas_price_oracle.txt"
    ))
    .unwrap();
    let gas_price_oracle = Account {
        address: hex!("420000000000000000000000000000000000000F").into(),
        balance: BigInt::from(0u64),
        nonce: BigInt::from(0u64),
        code: Some(gas_price_oracle_code.into()),
        storage: vec![StorageSlot {
            index: BigInt::from(0u64),
            // bool isEcotone = true
            // bool isFjord = true
            value: BigInt::from(
                0x0000000000000000000000000000000000000000000000000000000000000101u64,
            ),
        }],
    };

    let l1_block_code =
        hex::decode(include_str!("../../data/optimism/predeploys/l1_block.txt")).unwrap();
    let l1_block = Account {
        address: hex!("4200000000000000000000000000000000000015").into(),
        balance: BigInt::from(0u64),
        nonce: BigInt::from(0u64),
        code: Some(l1_block_code.into()),
        storage: vec![
            StorageSlot {
                index: BigInt::from(0u64),
                // uint64 public number = 1
                // uint64 public timestamp = 1
                value: BigInt {
                    words: vec![
                        0x0000000000000001_u64, // least significative
                        0x0000000000000001_u64,
                    ],
                    sign_bit: false,
                },
            },
            StorageSlot {
                index: BigInt::from(1u64),
                // uint256 baseFee = 10 gwei
                value: BigInt::from(0x00000002540be400_u64),
            },
            StorageSlot {
                index: BigInt::from(2u64),
                // bytes32 hash = 0
                value: BigInt::from(0u64),
            },
            StorageSlot {
                index: BigInt::from(3u64),
                // uint64 sequenceNumber = 0
                // uint32 blobBaseFeeScalar = 1014213
                // uint32 baseFeeScalar = 5227
                value: BigInt {
                    words: vec![
                        0x0000000000000000_u64, // least significative
                        0x0000000000000000_u64,
                        0x00000000000f79c5_u64,
                        0x000000000000146b_u64,
                    ],
                    sign_bit: false,
                },
            },
            StorageSlot {
                index: BigInt::from(4u64),
                // bytes32 batcherHash = 0
                value: BigInt::from(0u64),
            },
            StorageSlot {
                index: BigInt::from(5u64),
                // uint256 l1FeeOverhead = 0
                value: BigInt::from(0u64),
            },
            StorageSlot {
                index: BigInt::from(6u64),
                // uint256 l1FeeScalar = 0
                value: BigInt::from(0u64),
            },
            StorageSlot {
                index: BigInt::from(7u64),
                // uint256 blobBaseFee = 10 gwei
                value: BigInt::from(0x00000002540be400_u64),
            },
        ],
    };

    /* The rest of the predeploys use a stubbed bytecode that reverts with a
               message indicating that the predeploy it's not supported. For each of
               them, the Solidity code that generates the bytecode is:

    // SPDX-License-Identifier: Unlicense
    pragma solidity ^0.8.0;

    contract NotSupported {
        fallback() external payable {
            revert("Predeploy <PredeployName> is not supported.");
        }
    }
            */
    let stubbed_predeploys_data = vec![
        ("LegacyMessagePasser", hex!("4200000000000000000000000000000000000000"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602f8360bf565b91507f5072656465706c6f79204c65676163794d65737361676550617373657220697360008301527f206e6f7420737570706f727465642e00000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea26469706673582212206ba272e31c33ce6fe2612b534c5aa5ed8905e1bed8a757ff1a74cc06509a17f664736f6c63430008000033"),
        ("DeployerWhitelist", hex!("4200000000000000000000000000000000000002"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602d8360bf565b91507f5072656465706c6f79204465706c6f79657257686974656c697374206973206e60008301527f6f7420737570706f727465642e000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea26469706673582212206af5fc0549e5db963a08cb2864cbbf5c4e27efb08219fc0e29bda83f84b121ac64736f6c63430008000033"),
        ("LegacyERC20ETH", hex!("DeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602a8360bf565b91507f5072656465706c6f79204c65676163794552433230455448206973206e6f742060008301527f737570706f727465642e000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea264697066735822122054e7f9d6c12400d5b4b67aed39be8c44a8b1461519e96a0e7764c69417239c7964736f6c63430008000033"),
        ("WETH9", hex!("4200000000000000000000000000000000000006"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860218360bf565b91507f5072656465706c6f79205745544839206973206e6f7420737570706f7274656460008301527f2e000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220860ec43d585e1b040780713555b6fc492d748c73586bdb8f2b9af441c4452dbf64736f6c63430008000033"),
        ("L2CrossDomainMessenger", hex!("4200000000000000000000000000000000000007"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860328360bf565b91507f5072656465706c6f79204c3243726f7373446f6d61696e4d657373656e67657260008301527f206973206e6f7420737570706f727465642e00000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea26469706673582212200fadec69889de49a1a3a14d4e7e477e00921681e12650f510863d0077c16f58864736f6c63430008000033"),
        ("L2StandardBridge", hex!("4200000000000000000000000000000000000010"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602c8360bf565b91507f5072656465706c6f79204c325374616e64617264427269646765206973206e6f60008301527f7420737570706f727465642e00000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220ce5c24ee894b04d974b95cd204ab35f85906430ba6f49d1ea70d3d0c9c204cb764736f6c63430008000033"),
        ("SequencerFeeVault", hex!("4200000000000000000000000000000000000011"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602d8360bf565b91507f5072656465706c6f792053657175656e6365724665655661756c74206973206e60008301527f6f7420737570706f727465642e000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea26469706673582212203990ed752a94bb02bd5162fef116c1b62079e8207c5164b3ae5a115f5cf0b31164736f6c63430008000033"),
        ("OptimismMintableERC20Factory", hex!("4200000000000000000000000000000000000012"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860388360bf565b91507f5072656465706c6f79204f7074696d69736d4d696e7461626c6545524332304660008301527f6163746f7279206973206e6f7420737570706f727465642e00000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220240605543d69b93641a24f1d153969c3969089a04a162fc9f18f95de926b385564736f6c63430008000033"),
        ("L1BlockNumber", hex!("4200000000000000000000000000000000000013"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860298360bf565b91507f5072656465706c6f79204c31426c6f636b4e756d626572206973206e6f74207360008301527f7570706f727465642e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea264697066735822122099ba6da366313d162bab19a497fab2200808ddd24935b9f8be496c3622110b1164736f6c63430008000033"),
        ("GovernanceToken", hex!("4200000000000000000000000000000000000042"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602b8360bf565b91507f5072656465706c6f7920476f7665726e616e6365546f6b656e206973206e6f7460008301527f20737570706f727465642e0000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea26469706673582212205a22322e97c15d3a28eb86abac215ed31bcf6e0cf562e2679ce5fb3495953cfc64736f6c63430008000033"),
        ("L2ToL1MessagePasser", hex!("4200000000000000000000000000000000000016"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602f8360bf565b91507f5072656465706c6f79204c32546f4c314d65737361676550617373657220697360008301527f206e6f7420737570706f727465642e00000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea26469706673582212205b2ed2ecc932d0e4a45e97ae7ac256e58848453ac06733b27890587962871a1864736f6c63430008000033"),
        ("L2ERC721Bridge", hex!("4200000000000000000000000000000000000014"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602a8360bf565b91507f5072656465706c6f79204c32455243373231427269646765206973206e6f742060008301527f737570706f727465642e000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea26469706673582212203f9de306b34383b29e9dfb174fd424d7e11d31e8859d0e96a2aa3a46609e826c64736f6c63430008000033"),
        ("OptimismMintableERC721Factory", hex!("4200000000000000000000000000000000000017"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860398360bf565b91507f5072656465706c6f79204f7074696d69736d4d696e7461626c6545524337323160008301527f466163746f7279206973206e6f7420737570706f727465642e000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea264697066735822122033131ae0c34f3246f5031971388431bd1dfb1b92d6b08d92a0a905911c1eeeeb64736f6c63430008000033"),
        ("ProxyAdmin", hex!("4200000000000000000000000000000000000018"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860268360bf565b91507f5072656465706c6f792050726f787941646d696e206973206e6f74207375707060008301527f6f727465642e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220c7b191ff1b21c73fb6a26fd1e972d6844631a700b7a316ca2d9e04905af44dbb64736f6c63430008000033"),
        ("BaseFeeVault", hex!("4200000000000000000000000000000000000019"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860288360bf565b91507f5072656465706c6f7920426173654665655661756c74206973206e6f7420737560008301527f70706f727465642e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220535ae2b8a6393c0be4de1dce095f5e17fc0c7a46b40ac7793db894328f1799e764736f6c63430008000033"),
        ("L1FeeVault", hex!("420000000000000000000000000000000000001a"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b6000604860268360bf565b91507f5072656465706c6f79204c314665655661756c74206973206e6f74207375707060008301527f6f727465642e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220dac6ab093c79da782b6e98ec67c48758f6c1cb80cba58e080c114a9b8c93befc64736f6c63430008000033"),
        ("SchemaRegistry", hex!("4200000000000000000000000000000000000020"), "0x60806040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040160349060a1565b60405180910390fd5b60006048602a8360bf565b91507f5072656465706c6f7920536368656d615265676973747279206973206e6f742060008301527f737570706f727465642e000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015260b881603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220b3daf5355920b581943cabb92a7cc67123467fdd1b054cb0c5f0e587c08da1be64736f6c63430008000033"),
        ("EAS", hex!("4200000000000000000000000000000000000021"), "0x60806040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401603490607b565b60405180910390fd5b60006048601f836099565b91507f5072656465706c6f7920454153206973206e6f7420737570706f727465642e006000830152602082019050919050565b60006020820190508181036000830152609281603d565b9050919050565b60008282526020820190509291505056fea2646970667358221220afa6c1aa54a8b3f4f979e1297db5838a94353f3b77b5ecc164da19db26ea89f564736f6c63430008000033"),
    ];

    let stubbed_predeploys = stubbed_predeploys_data
        .iter()
        .map(|(_name, address, code)| Account {
            address: address.into(),
            balance: BigInt::from(0u64),
            nonce: BigInt::from(0u64),
            code: Some(hex::decode(code).unwrap().into()),
            storage: vec![],
        });

    let predeploys = vec![gas_price_oracle, l1_block];

    predeploys.into_iter().chain(stubbed_predeploys).collect()
}

/// Tries to parse the provided string to create an instance of
/// [`OptimismHardfork`].
#[napi]
pub fn optimism_hardfork_from_string(hardfork: String) -> napi::Result<OptimismHardfork> {
    OptimismHardfork::try_from(hardfork.as_str())
}

#[napi]
pub fn optimism_provider_factory() -> ProviderFactory {
    let factory: Arc<dyn SyncProviderFactory> = Arc::new(OptimismProviderFactory);
    factory.into()
}

macro_rules! export_spec_id {
    ($($variant:ident),*) => {
        $(
            #[napi]
            pub const $variant: &str = edr_optimism::hardfork::id::$variant;
        )*
    };
}

// LATEST is not included because it is already included in l1.rs
export_spec_id! {
    BEDROCK,
    REGOLITH,
    SHANGHAI,
    CANYON,
    CANCUN,
    ECOTONE,
    FJORD,
    GRANITE
}
