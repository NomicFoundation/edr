import { assert } from "chai";
import { ReturnData } from "..";

describe("Errors", () => {
  it("check error message", async function () {
    // ABI encoded Error(string) of "Test error"
    const validData = new Uint8Array([
      0x08, 0xc3, 0x79, 0xa0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x54, 0x65, 0x73, 0x74,
      0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    ]);
    let returnData = new ReturnData(validData);

    assert.strictEqual(
      returnData.decodeError(),
      "Test error",
      "Error message should match the expected value"
    );

    const invalidPrefixData = new Uint8Array([0x0, 0xc3, 0x79, 0xa0, 0x0]);
    returnData = new ReturnData(invalidPrefixData);
    assert.throws(
      () => {
        returnData.decodeError();
      },
      /VM Exception while processing transaction: Expected return data to be a Error\(string\)/,
      "Error message should contain the expected error"
    );

    const invalidData = new Uint8Array([0x08, 0xc3, 0x79, 0xa0, 0x0]);
    returnData = new ReturnData(invalidData);
    assert.throws(
      () => {
        returnData.decodeError();
      },
      /VM Exception while processing transaction: Expected return data to contain a valid string/,
      "Error message should contain the expected error"
    );
  });

  it("check panic message", async function () {
    // ABI encoded Panic(uint256) of 0x11
    const validData = new Uint8Array([
      0x4e, 0x48, 0x7b, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11,
    ]);

    let returnData = new ReturnData(validData);
    const panic = returnData.decodePanic();
    assert.strictEqual(
      panic,
      BigInt(17),
      "Panic value should match the expected value"
    );

    const invalidPrefixData = new Uint8Array([
      0x0, 0x4e, 0x48, 0x7b, 0x71, 0x0,
    ]);
    returnData = new ReturnData(invalidPrefixData);
    assert.throws(
      () => {
        returnData.decodePanic();
      },
      /VM Exception while processing transaction: Expected return data to be a Panic\(uint256\)/,
      "Error message should contain the expected error"
    );

    const invalidData = new Uint8Array([0x4e, 0x48, 0x7b, 0x71, 0x0]);
    returnData = new ReturnData(invalidData);
    assert.throws(
      () => {
        returnData.decodePanic();
      },
      /VM Exception while processing transaction: Expected return data to contain a valid uint256/,
      "Error message should contain the expected error"
    );
  });
});
