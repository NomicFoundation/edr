name: EDR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

env:
  RUSTDOCFLAGS: -Dwarnings

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  check-edr:
    name: Check EDR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-rust

      # Install pre-built binaries for cargo hack
      - uses: taiki-e/install-action@cargo-hack

      - run: cargo hack check --feature-powerset --no-dev-deps
        env:
          RUSTFLAGS: -Dwarnings

  test-edr-rs:
    name: Test EDR (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check-edr
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Cache EDR RPC cache
        uses: actions/cache@v2
        with:
          path: |
            **/edr-cache
          key: edr-rs-rpc-cache-v1

      - name: Run cargo tests (with coverage)
        env:
          ALCHEMY_URL: ${{ secrets.ALCHEMY_URL }}
          INFURA_URL: ${{ secrets.INFURA_URL }}
        run: cargo llvm-cov --workspace --all-targets --all-features --codecov --output-path codecov.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: codecov.json
          name: ${{ matrix.os }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Doctests
        run: cargo test --doc --workspace --features tracing

      # disable until:
      # 1) https://github.com/napi-rs/napi-rs/issues/1405 is resolved (Windows-only)
      # 2) https://github.com/nextest-rs/nextest/issues/871 (all platforms)
      # when re-enabled, remove "Run cargo test"

      # Nextest
      # - name: Install latest nextest release
      #   uses: taiki-e/install-action@nextest

      # - name: Test with latest nextest release
      #   env:
      #     CARGO_INCREMENTAL: ${{ matrix.CARGO_INCREMENTAL }}
      #     ALCHEMY_URL: ${{ secrets.ALCHEMY_URL }}
      #   run: cargo nextest run --workspace --all-features --all-targets

  test-edr-ts:
    name: Test EDR TS bindings (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check-edr
    strategy:
      fail-fast: false
      matrix:
        node: [18.15]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ matrix.node }}

      - uses: ./.github/actions/setup-rust

      - name: Cache EDR RPC cache
        uses: actions/cache@v2
        with:
          path: |
            **/edr-cache
          key: edr-ts-rpc-cache-v1

      - name: Install package
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run tests
        env:
          ALCHEMY_URL: ${{ secrets.ALCHEMY_URL }}
        run: cd crates/edr_napi && pnpm test

  edr-style:
    name: Check EDR Style
    runs-on: ubuntu-latest
    needs: check-edr
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-rust
        with:
          components: clippy

      - name: Install nightly rustfmt
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          components: rustfmt

      - name: Run cargo fmt
        run: cargo +nightly fmt --all --check

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  edr-docs:
    name: Build EDR Docs
    runs-on: ubuntu-latest
    needs: check-edr
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-rust

      - name: Cargo doc
        run: cargo doc --workspace --no-deps --all-features

  lint:
    name: Run Prettier
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - name: Install package
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Run lint script
        run: pnpm run lint

  edr-napi-typings-file:
    name: Check that edr_napi typings file is up to date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - name: Install package
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build edr_napi
        run: cd crates/edr_napi && pnpm build

      - name: Check that there are no uncommitted changes
        run: git diff --exit-code
