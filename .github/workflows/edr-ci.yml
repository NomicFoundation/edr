name: EDR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  check-edr-safety:
    name: Check EDR dependencies safety (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      SFW_DEBUG: true
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-24.04", "macos-15", "windows-2025"]
    steps:
      - uses: actions/checkout@v5
      - uses: socketdev/action@v1
        with:
          mode: firewall
      - uses: ./.github/actions/setup-rust
      - uses: ./.github/actions/setup-node

      - name: Pnpm safety
        run: sfw pnpm install --frozen-lockfile --prefer-offline

      - name: Cargo safety
        run: sfw cargo fetch

  check-edr:
    name: Check EDR
    runs-on: ubuntu-24.04
    needs: check-edr-safety
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-rust

      # Install pre-built binaries for cargo hack
      - uses: taiki-e/install-action@cargo-hack

      - name: Cargo check no default features for all crates
        run: cargo check --workspace --all-targets --no-default-features

      - name: Cargo hack check for EDR crates
        run: |
          chmod +x ./.github/scripts/cargo-hack-edr.sh
          ./.github/scripts/cargo-hack-edr.sh
        shell: bash

  test-edr-rs:
    name: Test EDR (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [check-edr-safety, check-edr]
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-24.04", "macos-15", "windows-2025"]
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Restore EDR RPC cache
        uses: actions/cache/restore@v4
        with:
          path: |
            **/edr-cache
          key: edr-rs-rpc-cache-v1-${{ matrix.os }}

      - name: Run cargo tests (with coverage)
        env:
          ALCHEMY_URL: ${{ secrets.ALCHEMY_URL }}
          INFURA_URL: ${{ secrets.INFURA_URL }}
        run: cargo llvm-cov --workspace --all-targets --all-features --codecov --output-path codecov.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: codecov.json
          name: ${{ matrix.os }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Doctests
        run: cargo test --doc --workspace --features tracing

      - name: Save EDR RPC cache
        uses: actions/cache/save@v4
        with:
          path: |
            **/edr-cache
          key: edr-rs-rpc-cache-v1-${{ matrix.os }}-${{ hashFiles('**/edr-cache/**/*') }}

      # disable until:
      # 1) https://github.com/napi-rs/napi-rs/issues/1405 is resolved (Windows-only)
      # 2) https://github.com/nextest-rs/nextest/issues/871 (all platforms)
      # when re-enabled, remove "Run cargo test"

      # Nextest
      # - name: Install latest nextest release
      #   uses: taiki-e/install-action@nextest

      # - name: Test with latest nextest release
      #   env:
      #     CARGO_INCREMENTAL: ${{ matrix.CARGO_INCREMENTAL }}
      #     ALCHEMY_URL: ${{ secrets.ALCHEMY_URL }}
      #   run: cargo nextest run --workspace --all-features --all-targets

  test-edr-ts:
    name: Test EDR TS bindings (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [check-edr-safety, check-edr]
    strategy:
      fail-fast: false
      matrix:
        node: [20]
        os: [ubuntu-24.04, macos-15, windows-2025]
    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ matrix.node }}

      - uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Restore EDR RPC cache
        uses: actions/cache/restore@v4
        with:
          path: |
            **/edr-cache
          key: edr-ts-rpc-cache-v1-${{ matrix.os }}

      - name: Install package
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run tests
        env:
          ALCHEMY_URL: ${{ secrets.ALCHEMY_URL }}
          # Enables chalk colors in CI, required for logs tests
          FORCE_COLOR: 3
        shell: bash
        run: |
          source <(cargo llvm-cov show-env --export-prefix)
          pnpm -C crates/edr_napi test
          # `--release` included to match `build:dev` compilation flags
          cargo llvm-cov report --release --codecov --output-path codecov.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: codecov.json
          name: ${{ matrix.os }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Save EDR RPC cache
        uses: actions/cache/save@v4
        with:
          path: |
            **/edr-cache
          key: edr-ts-rpc-cache-v1-${{ matrix.os }}-${{ hashFiles('**/edr-cache/**/*') }}

  edr-style:
    name: Check EDR Style
    runs-on: ubuntu-24.04
    needs: [check-edr-safety, check-edr]
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-rust
        with:
          components: clippy

      - name: Install nightly rustfmt
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          components: rustfmt
          cache: false # already set up in previous step

      - name: Run cargo fmt
        run: cargo +nightly fmt --all --check

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  edr-docs:
    name: Build EDR Docs
    runs-on: ubuntu-24.04
    needs: [check-edr-safety, check-edr]
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-rust

      - name: Cargo doc
        run: |
          chmod +x ./.github/scripts/cargo-doc.sh
          ./.github/scripts/cargo-doc.sh
        shell: bash

  build-and-lint:
    name: Build and lint
    runs-on: ubuntu-24.04
    needs: check-edr-safety
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-node

      - name: Install package
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Run build script
        run: pnpm run build:dev
      - name: Run lint script
        run: pnpm run lint

  edr-napi-typings-file:
    name: Check that edr_napi typings file is up to date
    runs-on: ubuntu-24.04
    needs: check-edr-safety
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-node

      - name: Install package
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build edr_napi
        run: cd crates/edr_napi && pnpm build:typingFile

      - name: Check that there are no uncommitted changes
        run: git diff --exit-code
  edr-integration-tests:
    name: Run integration tests
    runs-on: ubuntu-24.04
    needs: check-edr-safety
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-node

      - uses: ./.github/actions/setup-rust
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install package
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run integration tests
        shell: bash
        run: |
          source <(cargo llvm-cov show-env --export-prefix)
          pnpm run --recursive --filter './js/integration-tests/*' test
          # `--release` included to match `build:dev` compilation flags
          cargo llvm-cov report --release --codecov --output-path codecov.json
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: codecov.json
          name: ubuntu-24.04
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
