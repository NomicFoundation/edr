name: EDR NPM release
env:
  DEBUG: napi:*
  APP_NAME: edr
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  NUMBER_OF_TARGETS: 7
permissions:
  contents: write
  id-token: write
on:
  push:
    # pre-releases will be triggered in any of these branches
    # production releases will only be triggered for `main`
    branches:
      - main
      - prerelease
      - hh2
      - feat/solidity-tests
      - pnpm-min-age
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
  workflow_dispatch:

jobs:
  build:
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              set -euo pipefail
              pnpm run build --target x86_64-apple-darwin
              strip -x *.node
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm run build --target x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              set -euo pipefail
              pnpm run build --target x86_64-unknown-linux-gnu --use-napi-cross
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |
              set -euo pipefail              
              # use musl-cross toolchain installed below
              export CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc
              export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc
              export RUSTFLAGS="${RUSTFLAGS:-} -C target-feature=-crt-static"
              pnpm run build --target x86_64-unknown-linux-musl --use-napi-cross
              strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              set -euo pipefail
              pnpm run build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              set -euo pipefail
              pnpm run build --target aarch64-unknown-linux-gnu --use-napi-cross
              strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: |
              set -euo pipefail
              # use musl-cross toolchain installed below
              export CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc
              export RUSTFLAGS="${RUSTFLAGS:-} -C target-feature=-crt-static"
              pnpm run build --target aarch64-unknown-linux-musl
              aarch64-linux-musl-strip *.node
    defaults:
      run:
        working-directory: ./crates/edr_napi

    steps:
      - uses: actions/checkout@v5

      - name: Check number of targets
        shell: bash
        run: |
          echo "Number of build jobs: ${{ strategy.job-total }}"
          echo "Expected number of build jobs: $NUMBER_OF_TARGETS"
          test ${{ strategy.job-total }} -eq "$NUMBER_OF_TARGETS"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
          components: rust-src

      - name: Ensure Rust target is installed
        shell: bash
        run: |
          echo "Installed targets:"
          rustup target list --installed || true
          if ! rustup target list --installed | grep -q '${{ matrix.settings.target }}'; then
            echo "Missing target ${{ matrix.settings.target }}, installing..."
            rustup target add '${{ matrix.settings.target }}'
            rustup target list --installed
          fi

      - name: Install musl-cross (x86_64)
        if: ${{ matrix.settings.target == 'x86_64-unknown-linux-musl' }}
        run: |
          set -euo pipefail
          curl -fsSL -o x86_64-linux-musl-cross.tgz https://musl.cc/x86_64-linux-musl-cross.tgz
          tar -xzf x86_64-linux-musl-cross.tgz
          echo "$PWD/x86_64-linux-musl-cross/bin" >> "$GITHUB_PATH"

      - name: Install aarch64 musl toolchain
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          set -euo pipefail
          curl -fsSL -o aarch64-linux-musl-cross.tgz https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xzf aarch64-linux-musl-cross.tgz
          echo "$PWD/aarch64-linux-musl-cross/bin" >> "$GITHUB_PATH"

      - name: Setup node and pnpm
        uses: ./.github/actions/setup-node

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      # - uses: mlugg/setup-zig@v2
      #   if: ${{ contains(matrix.settings.target, 'musl') }}
      #   with:
      #     version: 0.14.1
      # - name: Install cargo-zigbuild
      #   uses: taiki-e/install-action@v2
      #   if: ${{ contains(matrix.settings.target, 'musl') }}
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     tool: cargo-zigbuild
      # - name: Setup toolchain
      #   run: ${{ matrix.settings.setup }}
      #   if: ${{ matrix.settings.setup }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          # The upload artifact action doesn't respect the working directory setting. Unclear if this is a bug or not
          # https://github.com/actions/upload-artifact/issues/294
          path: ./crates/edr_napi/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
        node:
          - "20"
          - "22"
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: ./crates/edr_napi
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: ./.github/actions/setup-node
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./crates/edr_napi/
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm testNoBuild
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
        node:
          - "20"
          - "22"
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: ./.github/actions/setup-node
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
      - name: Install dependencies (multi-arch/libc)
        run: >
          pnpm install --frozen-lockfile --prefer-offline --os=linux --cpu=x64 --cpu=arm64 --libc=glibc --libc=musl


      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings (container, pnpm)
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }} # e.g. node:22-slim or node:22-alpine
          options: >-
            -e CI=1 -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}


          run: |
            sh -lc '
              # enable pnpm, then install inside the container for this arch/libc
              corepack enable
              pnpm -v
              pnpm install --frozen-lockfile
              pnpm run testNoBuild
            '
  check_commit:
    name: Check commit
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.author_association == 'OWNER' || github.event.pull_request.author_association == 'MEMBER' || github.event.pull_request.author_association == 'COLLABORATOR'
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Check if commit message is a release commit
        id: check_commit
        # Must match commit check in publish step
        run: |
          if git log -1 --pretty=%B | grep "^edr-[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "Check commit: matches"
            echo "match=true" >> "$GITHUB_OUTPUT"
          else
            echo "Check commit: no match"
            echo "match=false" >> "$GITHUB_OUTPUT"
          fi
    outputs:
      match: ${{ steps.check_commit.outputs.match }}
  # publish:
  #   name: Publish
  #   environment: edr-release
  #   runs-on: ubuntu-latest
  #   needs:
  #     - check_commit
  #     - test-macOS-windows-binding
  #     - test-linux-binding
  #   # Only run workflow if the commit message is a release commit.
  #   if: ${{ needs.check_commit.outputs.match == 'true' }}
  #   defaults:
  #     run:
  #       working-directory: ./crates/edr_napi
  #   steps:
  #     - uses: actions/checkout@v5
  #     - name: Setup node
  #       uses: ./.github/actions/setup-node
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile --prefer-offline
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v5
  #       with:
  #         path: ./crates/edr_napi/artifacts
  #     - name: Check number of artifacts
  #       shell: bash
  #       run: |
  #         tree artifacts
  #         # get number of artifacts with unique names
  #         NUMBER_OF_ARTIFACTS=$(ls -1q artifacts/*/*.node | xargs -n 1 basename | sort | uniq | wc -l)
  #         echo "Number of unique artifacts: $NUMBER_OF_ARTIFACTS"
  #         echo "Expected number of unique artifacts: $NUMBER_OF_TARGETS"
  #         test "$NUMBER_OF_ARTIFACTS" -eq "$NUMBER_OF_TARGETS"
  #     - name: Install sponge
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y moreutils
  #     - name: Move artifacts
  #       run: pnpm artifacts
  #     - name: Publish
  #       run: |
  #         if git log -1 --pretty=%B | grep "^edr-[0-9]\+\.[0-9]\+\.[0-9]\+-";
  #         then
  #           if [ "${{ github.event_name }}" = "push" ]; then
  #             echo "Publishing pre-release"
  #             echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #             pnpm publish --no-git-checks --provenance --tag next --access public
  #           else
  #             echo "Trying to publish a pre-release from a branch that is not 'main' or 'prerelease'"
  #           fi
  #         elif git log -1 --pretty=%B | grep "^edr-[0-9]\+\.[0-9]\+\.[0-9]\+\s*";
  #         then
  #           if [ "$GITHUB_REF" == "refs/heads/main" -o "$GITHUB_REF" == "refs/heads/hh2" ]; then
  #             echo "Publishing release"
  #             echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #             pnpm publish --no-git-checks --provenance --access public
  #           else
  #             echo "Trying to publish a release from a branch that is not 'main' or 'h2'"
  #           fi
  #         else
  #           echo "Not a release, skipping publish"
  #         fi
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NPM_TOKEN: ${{ secrets.IGNORED_ORG_NPM_TOKEN }}
