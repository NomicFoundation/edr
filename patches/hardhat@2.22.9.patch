diff --git a/internal/hardhat-network/provider/provider.js b/internal/hardhat-network/provider/provider.js
index 5538259ab7fcbf99b7fa82e26922510da6444613..a8180e92ed196825e7b2726eda4d5d4adfc7da53 100644
--- a/internal/hardhat-network/provider/provider.js
+++ b/internal/hardhat-network/provider/provider.js
@@ -58,11 +58,12 @@ const log = (0, debug_1.default)("hardhat:core:hardhat-network:provider");
 exports.DEFAULT_COINBASE = "0xc014ba5ec014ba5ec014ba5ec014ba5ec014ba5e";
 let _globalEdrContext;
 // Lazy initialize the global EDR context.
-function getGlobalEdrContext() {
-    const { EdrContext } = (0, napi_rs_1.requireNapiRsModule)("@nomicfoundation/edr");
+async function getGlobalEdrContext() {
+    const { EdrContext, L1_CHAIN_TYPE, l1ProviderFactory } = (0, napi_rs_1.requireNapiRsModule)("@nomicfoundation/edr");
     if (_globalEdrContext === undefined) {
         // Only one is allowed to exist
         _globalEdrContext = new EdrContext();
+        await _globalEdrContext.registerProviderFactory(L1_CHAIN_TYPE, l1ProviderFactory());
     }
     return _globalEdrContext;
 }
@@ -109,7 +110,7 @@ class EdrProviderWrapper extends events_1.EventEmitter {
         }
     }
     static async create(config, loggerConfig, tracingConfig) {
-        const { Provider } = (0, napi_rs_1.requireNapiRsModule)("@nomicfoundation/edr");
+        const { L1_CHAIN_TYPE } = (0, napi_rs_1.requireNapiRsModule)("@nomicfoundation/edr");
         const coinbase = config.coinbase ?? exports.DEFAULT_COINBASE;
         let fork;
         if (config.forkConfig !== undefined) {
@@ -131,7 +132,8 @@ class EdrProviderWrapper extends events_1.EventEmitter {
         const contractsIdentifier = new contracts_identifier_1.ContractsIdentifier();
         const vmTraceDecoder = new vm_trace_decoder_1.VmTraceDecoder(contractsIdentifier);
         const hardforkName = (0, hardforks_1.getHardforkName)(config.hardfork);
-        const provider = await Provider.withConfig(getGlobalEdrContext(), {
+        const context = await getGlobalEdrContext();
+        const provider = await context.createProvider(L1_CHAIN_TYPE, {
             allowBlocksWithSameTimestamp: config.allowBlocksWithSameTimestamp ?? false,
             allowUnlimitedContractSize: config.allowUnlimitedContractSize,
             bailOnCallFailure: config.throwOnCallFailures,
@@ -187,8 +189,10 @@ class EdrProviderWrapper extends events_1.EventEmitter {
                     printLineFn(message);
                 }
             },
-        }, (event) => {
-            eventAdapter.emit("ethEvent", event);
+        }, {
+            subscriptionCallback: (event) => {
+                eventAdapter.emit("ethEvent", event);
+            },
         });
         const minimalEthereumJsNode = {
             _vm: (0, minimal_vm_1.getMinimalEthereumJsVm)(provider),
@@ -210,11 +214,10 @@ class EdrProviderWrapper extends events_1.EventEmitter {
         else if (args.method === "hardhat_getStackTraceFailuresCount") {
             return this._getStackTraceFailuresCountAction(...this._getStackTraceFailuresCountParams(params));
         }
-        const stringifiedArgs = JSON.stringify({
+        const responseObject = await this._provider.handleRequest({
             method: args.method,
             params,
         });
-        const responseObject = await this._provider.handleRequest(stringifiedArgs);
         let response;
         if (typeof responseObject.data === "string") {
             response = JSON.parse(responseObject.data);
@@ -316,14 +319,14 @@ class EdrProviderWrapper extends events_1.EventEmitter {
         this._vmTracer = vmTracer;
     }
     // temporarily added to make smock work with HH+EDR
-    _setCallOverrideCallback(callback) {
+    async _setCallOverrideCallback(callback) {
         this._callOverrideCallback = callback;
-        this._provider.setCallOverrideCallback(async (address, data) => {
+        await this._provider.setCallOverrideCallback(async (address, data) => {
             return this._callOverrideCallback?.(address, data);
         });
     }
-    _setVerboseTracing(enabled) {
-        this._provider.setVerboseTracing(enabled);
+    async _setVerboseTracing(enabled) {
+        await this._provider.setVerboseTracing(enabled);
     }
     _ethEventListener(event) {
         const subscription = `0x${event.filterId.toString(16)}`;
@@ -415,7 +418,7 @@ async function createHardhatNetworkProvider(hardhatNetworkProviderConfig, logger
     log("Making tracing config");
     const tracingConfig = await makeTracingConfig(artifacts);
     log("Creating EDR provider");
-    const provider = EdrProviderWrapper.create(hardhatNetworkProviderConfig, loggerConfig, tracingConfig);
+    const provider = await EdrProviderWrapper.create(hardhatNetworkProviderConfig, loggerConfig, tracingConfig);
     log("EDR provider created");
     return provider;
 }
diff --git a/internal/hardhat-network/provider/utils/convertToEdr.js b/internal/hardhat-network/provider/utils/convertToEdr.js
index f1532cd82ff40a92721e6b0c0437fdb7c4f1323c..f323761b62804821df1f35918b96adcfe6a5b83a 100644
--- a/internal/hardhat-network/provider/utils/convertToEdr.js
+++ b/internal/hardhat-network/provider/utils/convertToEdr.js
@@ -6,42 +6,41 @@ const napi_rs_1 = require("../../../../common/napi-rs");
 const hardforks_1 = require("../../../util/hardforks");
 /* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */
 function ethereumsjsHardforkToEdrSpecId(hardfork) {
-    const { SpecId } = (0, napi_rs_1.requireNapiRsModule)("@nomicfoundation/edr");
     switch (hardfork) {
         case hardforks_1.HardforkName.FRONTIER:
-            return 0 /* SpecId.Frontier */;
+            return "Frontier";
         case hardforks_1.HardforkName.HOMESTEAD:
-            return 2 /* SpecId.Homestead */;
+            return "Homestead";
         case hardforks_1.HardforkName.DAO:
-            return 3 /* SpecId.DaoFork */;
+            return "DaoFork";
         case hardforks_1.HardforkName.TANGERINE_WHISTLE:
-            return 4 /* SpecId.Tangerine */;
+            return "Tangerine";
         case hardforks_1.HardforkName.SPURIOUS_DRAGON:
-            return 5 /* SpecId.SpuriousDragon */;
+            return "SpuriousDragon";
         case hardforks_1.HardforkName.BYZANTIUM:
-            return 6 /* SpecId.Byzantium */;
+            return "Byzantium";
         case hardforks_1.HardforkName.CONSTANTINOPLE:
-            return 7 /* SpecId.Constantinople */;
+            return "Constantinople";
         case hardforks_1.HardforkName.PETERSBURG:
-            return 8 /* SpecId.Petersburg */;
+            return "Petersburg";
         case hardforks_1.HardforkName.ISTANBUL:
-            return 9 /* SpecId.Istanbul */;
+            return "Istanbul";
         case hardforks_1.HardforkName.MUIR_GLACIER:
-            return 10 /* SpecId.MuirGlacier */;
+            return "MuirGlacier";
         case hardforks_1.HardforkName.BERLIN:
-            return 11 /* SpecId.Berlin */;
+            return "Berlin";
         case hardforks_1.HardforkName.LONDON:
-            return 12 /* SpecId.London */;
+            return "London";
         case hardforks_1.HardforkName.ARROW_GLACIER:
-            return 13 /* SpecId.ArrowGlacier */;
+            return "ArrowGlacier";
         case hardforks_1.HardforkName.GRAY_GLACIER:
-            return 14 /* SpecId.GrayGlacier */;
+            return "GrayGlacier";
         case hardforks_1.HardforkName.MERGE:
-            return 15 /* SpecId.Merge */;
+            return "Merge";
         case hardforks_1.HardforkName.SHANGHAI:
-            return 16 /* SpecId.Shanghai */;
+            return "Shanghai";
         case hardforks_1.HardforkName.CANCUN:
-            return 17 /* SpecId.Cancun */;
+            return "Cancun";
         default:
             const _exhaustiveCheck = hardfork;
             throw new Error(`Unknown hardfork name '${hardfork}', this shouldn't happen`);
diff --git a/src/internal/hardhat-network/provider/provider.ts b/src/internal/hardhat-network/provider/provider.ts
index c48c51cfb758478b32295e82952b3cd4d9967aac..ee993d640a620425b0cd3564f0286c47aa641421 100644
--- a/src/internal/hardhat-network/provider/provider.ts
+++ b/src/internal/hardhat-network/provider/provider.ts
@@ -1,6 +1,5 @@
 import type {
   Artifacts,
-  BoundExperimentalHardhatNetworkMessageTraceHook,
   CompilerInput,
   CompilerOutput,
   EIP1193Provider,
@@ -84,14 +83,18 @@ export const DEFAULT_COINBASE = "0xc014ba5ec014ba5ec014ba5ec014ba5ec014ba5e";
 let _globalEdrContext: EdrContext | undefined;
 
 // Lazy initialize the global EDR context.
-export function getGlobalEdrContext(): EdrContext {
-  const { EdrContext } = requireNapiRsModule(
+export async function getGlobalEdrContext(): Promise<EdrContext> {
+  const { EdrContext, L1_CHAIN_TYPE, l1ProviderFactory } = requireNapiRsModule(
     "@nomicfoundation/edr"
   ) as typeof import("@nomicfoundation/edr");
 
   if (_globalEdrContext === undefined) {
     // Only one is allowed to exist
     _globalEdrContext = new EdrContext();
+    await _globalEdrContext.registerProviderFactory(
+      L1_CHAIN_TYPE,
+      l1ProviderFactory()
+    );
   }
 
   return _globalEdrContext;
@@ -116,7 +119,6 @@ interface HardhatNetworkProviderConfig {
   initialBaseFeePerGas?: number;
   initialDate?: Date;
   coinbase?: string;
-  experimentalHardhatNetworkMessageTraceHooks?: BoundExperimentalHardhatNetworkMessageTraceHook[];
   forkConfig?: ForkConfig;
   forkCachePath?: string;
   enableTransientStorage: boolean;
@@ -194,7 +196,7 @@ export class EdrProviderWrapper
     loggerConfig: LoggerConfig,
     tracingConfig?: TracingConfig
   ): Promise<EdrProviderWrapper> {
-    const { Provider } = requireNapiRsModule(
+    const { L1_CHAIN_TYPE } = requireNapiRsModule(
       "@nomicfoundation/edr"
     ) as typeof import("@nomicfoundation/edr");
 
@@ -228,8 +230,9 @@ export class EdrProviderWrapper
 
     const hardforkName = getHardforkName(config.hardfork);
 
-    const provider = await Provider.withConfig(
-      getGlobalEdrContext(),
+    const context = await getGlobalEdrContext();
+    const provider = await context.createProvider(
+      L1_CHAIN_TYPE,
       {
         allowBlocksWithSameTimestamp:
           config.allowBlocksWithSameTimestamp ?? false,
@@ -300,8 +303,10 @@ export class EdrProviderWrapper
           }
         },
       },
-      (event: SubscriptionEvent) => {
-        eventAdapter.emit("ethEvent", event);
+      {
+        subscriptionCallback: (event: SubscriptionEvent) => {
+          eventAdapter.emit("ethEvent", event);
+        },
       }
     );
 
@@ -346,15 +351,11 @@ export class EdrProviderWrapper
       );
     }
 
-    const stringifiedArgs = JSON.stringify({
+    const responseObject: Response = await this._provider.handleRequest({
       method: args.method,
       params,
     });
 
-    const responseObject: Response = await this._provider.handleRequest(
-      stringifiedArgs
-    );
-
     let response;
     if (typeof responseObject.data === "string") {
       response = JSON.parse(responseObject.data);
@@ -481,18 +482,20 @@ export class EdrProviderWrapper
   }
 
   // temporarily added to make smock work with HH+EDR
-  private _setCallOverrideCallback(callback: CallOverrideCallback) {
+  private async _setCallOverrideCallback(
+    callback: CallOverrideCallback
+  ): Promise<void> {
     this._callOverrideCallback = callback;
 
-    this._provider.setCallOverrideCallback(
+    await this._provider.setCallOverrideCallback(
       async (address: Buffer, data: Buffer) => {
         return this._callOverrideCallback?.(address, data);
       }
     );
   }
 
-  private _setVerboseTracing(enabled: boolean) {
-    this._provider.setVerboseTracing(enabled);
+  private async _setVerboseTracing(enabled: boolean): Promise<void> {
+    await this._provider.setVerboseTracing(enabled);
   }
 
   private _ethEventListener(event: SubscriptionEvent) {
@@ -630,7 +633,7 @@ export async function createHardhatNetworkProvider(
   log("Making tracing config");
   const tracingConfig = await makeTracingConfig(artifacts);
   log("Creating EDR provider");
-  const provider = EdrProviderWrapper.create(
+  const provider = await EdrProviderWrapper.create(
     hardhatNetworkProviderConfig,
     loggerConfig,
     tracingConfig
diff --git a/src/internal/hardhat-network/provider/utils/convertToEdr.ts b/src/internal/hardhat-network/provider/utils/convertToEdr.ts
index a955ef12258fdd26580509feac5a22df03aae979..703e038f2b38fb9c2636ec07e97291e4fac38acf 100644
--- a/src/internal/hardhat-network/provider/utils/convertToEdr.ts
+++ b/src/internal/hardhat-network/provider/utils/convertToEdr.ts
@@ -21,46 +21,42 @@ import {
 
 /* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */
 
-export function ethereumsjsHardforkToEdrSpecId(hardfork: HardforkName): SpecId {
-  const { SpecId } = requireNapiRsModule(
-    "@nomicfoundation/edr"
-  ) as typeof import("@nomicfoundation/edr");
-
+export function ethereumsjsHardforkToEdrSpecId(hardfork: HardforkName): string {
   switch (hardfork) {
     case HardforkName.FRONTIER:
-      return SpecId.Frontier;
+      return "Frontier";
     case HardforkName.HOMESTEAD:
-      return SpecId.Homestead;
+      return "Homestead";
     case HardforkName.DAO:
-      return SpecId.DaoFork;
+      return "DaoFork";
     case HardforkName.TANGERINE_WHISTLE:
-      return SpecId.Tangerine;
+      return "Tangerine";
     case HardforkName.SPURIOUS_DRAGON:
-      return SpecId.SpuriousDragon;
+      return "SpuriousDragon";
     case HardforkName.BYZANTIUM:
-      return SpecId.Byzantium;
+      return "Byzantium";
     case HardforkName.CONSTANTINOPLE:
-      return SpecId.Constantinople;
+      return "Constantinople";
     case HardforkName.PETERSBURG:
-      return SpecId.Petersburg;
+      return "Petersburg";
     case HardforkName.ISTANBUL:
-      return SpecId.Istanbul;
+      return "Istanbul";
     case HardforkName.MUIR_GLACIER:
-      return SpecId.MuirGlacier;
+      return "MuirGlacier";
     case HardforkName.BERLIN:
-      return SpecId.Berlin;
+      return "Berlin";
     case HardforkName.LONDON:
-      return SpecId.London;
+      return "London";
     case HardforkName.ARROW_GLACIER:
-      return SpecId.ArrowGlacier;
+      return "ArrowGlacier";
     case HardforkName.GRAY_GLACIER:
-      return SpecId.GrayGlacier;
+      return "GrayGlacier";
     case HardforkName.MERGE:
-      return SpecId.Merge;
+      return "Merge";
     case HardforkName.SHANGHAI:
-      return SpecId.Shanghai;
+      return "Shanghai";
     case HardforkName.CANCUN:
-      return SpecId.Cancun;
+      return "Cancun";
     default:
       const _exhaustiveCheck: never = hardfork;
       throw new Error(
